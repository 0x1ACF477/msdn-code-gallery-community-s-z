//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Finance.Silverlight.Graphs.FinanceDataService {
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElementTypeDefs", Namespace="http://schemas.datacontract.org/2004/07/Finance.Common.Base")]
    public enum ElementTypeDefs : short {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Wszystko = -1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Nieokreslone = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GPWAkcje = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GPWObligacje = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GPWIndeksy = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElementWrapper", Namespace="http://schemas.datacontract.org/2004/07/Finance.Web.DataWrappers")]
    public partial class ElementWrapper : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs ElementTypeField;
        
        private string NameField;
        
        private string TickerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs ElementType {
            get {
                return this.ElementTypeField;
            }
            set {
                if ((this.ElementTypeField.Equals(value) != true)) {
                    this.ElementTypeField = value;
                    this.RaisePropertyChanged("ElementType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ElementDailyDataRange", Namespace="http://schemas.datacontract.org/2004/07/Finance.Web.DataWrappers")]
    public partial class ElementDailyDataRange : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.DailyDataWrapper> DailyDataField;
        
        private System.DateTime DateFromField;
        
        private System.DateTime DateToField;
        
        private string TickerField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.DailyDataWrapper> DailyData {
            get {
                return this.DailyDataField;
            }
            set {
                if ((object.ReferenceEquals(this.DailyDataField, value) != true)) {
                    this.DailyDataField = value;
                    this.RaisePropertyChanged("DailyData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateFrom {
            get {
                return this.DateFromField;
            }
            set {
                if ((this.DateFromField.Equals(value) != true)) {
                    this.DateFromField = value;
                    this.RaisePropertyChanged("DateFrom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTo {
            get {
                return this.DateToField;
            }
            set {
                if ((this.DateToField.Equals(value) != true)) {
                    this.DateToField = value;
                    this.RaisePropertyChanged("DateTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Ticker {
            get {
                return this.TickerField;
            }
            set {
                if ((object.ReferenceEquals(this.TickerField, value) != true)) {
                    this.TickerField = value;
                    this.RaisePropertyChanged("Ticker");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DailyDataWrapper", Namespace="http://schemas.datacontract.org/2004/07/Finance.Web.DataWrappers")]
    public partial class DailyDataWrapper : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal CloseValueField;
        
        private System.DateTime DayField;
        
        private double DayAsDoubleField;
        
        private decimal MaxValueField;
        
        private decimal MinValueField;
        
        private decimal OpenValueField;
        
        private decimal VolumeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal CloseValue {
            get {
                return this.CloseValueField;
            }
            set {
                if ((this.CloseValueField.Equals(value) != true)) {
                    this.CloseValueField = value;
                    this.RaisePropertyChanged("CloseValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Day {
            get {
                return this.DayField;
            }
            set {
                if ((this.DayField.Equals(value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double DayAsDouble {
            get {
                return this.DayAsDoubleField;
            }
            set {
                if ((this.DayAsDoubleField.Equals(value) != true)) {
                    this.DayAsDoubleField = value;
                    this.RaisePropertyChanged("DayAsDouble");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MaxValue {
            get {
                return this.MaxValueField;
            }
            set {
                if ((this.MaxValueField.Equals(value) != true)) {
                    this.MaxValueField = value;
                    this.RaisePropertyChanged("MaxValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal MinValue {
            get {
                return this.MinValueField;
            }
            set {
                if ((this.MinValueField.Equals(value) != true)) {
                    this.MinValueField = value;
                    this.RaisePropertyChanged("MinValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal OpenValue {
            get {
                return this.OpenValueField;
            }
            set {
                if ((this.OpenValueField.Equals(value) != true)) {
                    this.OpenValueField = value;
                    this.RaisePropertyChanged("OpenValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Volume {
            get {
                return this.VolumeField;
            }
            set {
                if ((this.VolumeField.Equals(value) != true)) {
                    this.VolumeField = value;
                    this.RaisePropertyChanged("Volume");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="", ConfigurationName="FinanceDataService.FinanceDataService")]
    public interface FinanceDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FinanceDataService/SelectItems", ReplyAction="urn:FinanceDataService/SelectItemsResponse")]
        System.IAsyncResult BeginSelectItems(Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs itemsTypes, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper> EndSelectItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="urn:FinanceDataService/SelectDailyData", ReplyAction="urn:FinanceDataService/SelectDailyDataResponse")]
        System.IAsyncResult BeginSelectDailyData(string ticker, System.AsyncCallback callback, object asyncState);
        
        Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange EndSelectDailyData(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface FinanceDataServiceChannel : Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SelectDailyDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SelectDailyDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FinanceDataServiceClient : System.ServiceModel.ClientBase<Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService>, Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService {
        
        private BeginOperationDelegate onBeginSelectItemsDelegate;
        
        private EndOperationDelegate onEndSelectItemsDelegate;
        
        private System.Threading.SendOrPostCallback onSelectItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginSelectDailyDataDelegate;
        
        private EndOperationDelegate onEndSelectDailyDataDelegate;
        
        private System.Threading.SendOrPostCallback onSelectDailyDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public FinanceDataServiceClient() {
        }
        
        public FinanceDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FinanceDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FinanceDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FinanceDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<SelectItemsCompletedEventArgs> SelectItemsCompleted;
        
        public event System.EventHandler<SelectDailyDataCompletedEventArgs> SelectDailyDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService.BeginSelectItems(Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs itemsTypes, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectItems(itemsTypes, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper> Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService.EndSelectItems(System.IAsyncResult result) {
            return base.Channel.EndSelectItems(result);
        }
        
        private System.IAsyncResult OnBeginSelectItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs itemsTypes = ((Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs)(inValues[0]));
            return ((Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService)(this)).BeginSelectItems(itemsTypes, callback, asyncState);
        }
        
        private object[] OnEndSelectItems(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper> retVal = ((Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService)(this)).EndSelectItems(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectItemsCompleted(object state) {
            if ((this.SelectItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectItemsCompleted(this, new SelectItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectItemsAsync(Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs itemsTypes) {
            this.SelectItemsAsync(itemsTypes, null);
        }
        
        public void SelectItemsAsync(Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs itemsTypes, object userState) {
            if ((this.onBeginSelectItemsDelegate == null)) {
                this.onBeginSelectItemsDelegate = new BeginOperationDelegate(this.OnBeginSelectItems);
            }
            if ((this.onEndSelectItemsDelegate == null)) {
                this.onEndSelectItemsDelegate = new EndOperationDelegate(this.OnEndSelectItems);
            }
            if ((this.onSelectItemsCompletedDelegate == null)) {
                this.onSelectItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectItemsCompleted);
            }
            base.InvokeAsync(this.onBeginSelectItemsDelegate, new object[] {
                        itemsTypes}, this.onEndSelectItemsDelegate, this.onSelectItemsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService.BeginSelectDailyData(string ticker, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSelectDailyData(ticker, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService.EndSelectDailyData(System.IAsyncResult result) {
            return base.Channel.EndSelectDailyData(result);
        }
        
        private System.IAsyncResult OnBeginSelectDailyData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ticker = ((string)(inValues[0]));
            return ((Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService)(this)).BeginSelectDailyData(ticker, callback, asyncState);
        }
        
        private object[] OnEndSelectDailyData(System.IAsyncResult result) {
            Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange retVal = ((Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService)(this)).EndSelectDailyData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSelectDailyDataCompleted(object state) {
            if ((this.SelectDailyDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SelectDailyDataCompleted(this, new SelectDailyDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SelectDailyDataAsync(string ticker) {
            this.SelectDailyDataAsync(ticker, null);
        }
        
        public void SelectDailyDataAsync(string ticker, object userState) {
            if ((this.onBeginSelectDailyDataDelegate == null)) {
                this.onBeginSelectDailyDataDelegate = new BeginOperationDelegate(this.OnBeginSelectDailyData);
            }
            if ((this.onEndSelectDailyDataDelegate == null)) {
                this.onEndSelectDailyDataDelegate = new EndOperationDelegate(this.OnEndSelectDailyData);
            }
            if ((this.onSelectDailyDataCompletedDelegate == null)) {
                this.onSelectDailyDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSelectDailyDataCompleted);
            }
            base.InvokeAsync(this.onBeginSelectDailyDataDelegate, new object[] {
                        ticker}, this.onEndSelectDailyDataDelegate, this.onSelectDailyDataCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService CreateChannel() {
            return new FinanceDataServiceClientChannel(this);
        }
        
        private class FinanceDataServiceClientChannel : ChannelBase<Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService>, Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService {
            
            public FinanceDataServiceClientChannel(System.ServiceModel.ClientBase<Finance.Silverlight.Graphs.FinanceDataService.FinanceDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginSelectItems(Finance.Silverlight.Graphs.FinanceDataService.ElementTypeDefs itemsTypes, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = itemsTypes;
                System.IAsyncResult _result = base.BeginInvoke("SelectItems", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper> EndSelectItems(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper> _result = ((System.Collections.ObjectModel.ObservableCollection<Finance.Silverlight.Graphs.FinanceDataService.ElementWrapper>)(base.EndInvoke("SelectItems", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSelectDailyData(string ticker, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ticker;
                System.IAsyncResult _result = base.BeginInvoke("SelectDailyData", _args, callback, asyncState);
                return _result;
            }
            
            public Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange EndSelectDailyData(System.IAsyncResult result) {
                object[] _args = new object[0];
                Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange _result = ((Finance.Silverlight.Graphs.FinanceDataService.ElementDailyDataRange)(base.EndInvoke("SelectDailyData", _args, result)));
                return _result;
            }
        }
    }
}
