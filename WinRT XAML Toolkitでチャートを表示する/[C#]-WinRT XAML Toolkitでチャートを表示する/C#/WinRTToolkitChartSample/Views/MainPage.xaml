<prism:VisualStateAwarePage
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:WinRTToolkitChartSample.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:prism="using:Microsoft.Practices.Prism.StoreApps"
    xmlns:Charting="using:WinRTXamlToolkit.Controls.DataVisualization.Charting"
    xmlns:viewModels="using:WinRTToolkitChartSample.ViewModels"
    x:Name="pageRoot"
    x:Class="WinRTToolkitChartSample.Views.MainPage"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance Type=viewModels:MainPageViewModel, IsDesignTimeCreatable=True}"
    prism:ViewModelLocator.AutoWireViewModel="True">

    <prism:VisualStateAwarePage.Resources>
        <!-- TODO: Delete this line if the key AppName is declared in App.xaml -->
        <x:String x:Key="AppName">MainPage</x:String>
    </prism:VisualStateAwarePage.Resources>

    <!--
        This grid acts as a root panel for the page that defines two rows:
        * Row 0 contains the back button and page title
        * Row 1 contains the rest of the page layout
    -->
    <Grid Style="{StaticResource LayoutRootStyle}">
        <Grid.ColumnDefinitions>
            <ColumnDefinition/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="140" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <VisualStateManager.VisualStateGroups>

            <!-- Visual states reflect the application's view state -->
            <VisualStateGroup x:Name="ApplicationViewStates">
                <VisualState x:Name="FullScreenLandscape" />
                <VisualState x:Name="Filled" />

                <!-- The entire page respects the narrower 100-pixel margin convention for portrait -->
                <VisualState x:Name="FullScreenPortrait">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton"
							Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0"
								Value="{StaticResource PortraitBackButtonStyle}" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>

                <!-- The back button and title have different styles when snapped -->
                <VisualState x:Name="Snapped">
                    <Storyboard>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="backButton"
							Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0"
								Value="{StaticResource SnappedBackButtonStyle}" />
                        </ObjectAnimationUsingKeyFrames>
                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="pageTitle"
							Storyboard.TargetProperty="Style">
                            <DiscreteObjectKeyFrame KeyTime="0"
								Value="{StaticResource SnappedPageHeaderTextStyle}" />
                        </ObjectAnimationUsingKeyFrames>
                    </Storyboard>
                </VisualState>
            </VisualStateGroup>
        </VisualStateManager.VisualStateGroups>

        <!-- Back button and page title -->
        <Grid Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Button x:Name="backButton"
				Click="GoBack"
				IsEnabled="{Binding Frame.CanGoBack, ElementName=pageRoot}"
				Style="{StaticResource BackButtonStyle}" />
            <TextBlock x:Name="pageTitle"
				Grid.Column="1"
				Text="{StaticResource AppName}"
				Style="{StaticResource PageHeaderTextStyle}" />
        </Grid>
        <!-- 画面左部分のチャート -->
        <Charting:Chart Grid.Row="1">
            <!-- 縦の棒グラフを2つ表示 -->
            <Charting:ColumnSeries 
                Title="Item1"
                ItemsSource="{Binding ChartItems1}" 
                IndependentValueBinding="{Binding Name}" 
                DependentValueBinding="{Binding Value}" 
                IsSelectionEnabled="True" />
            <Charting:ColumnSeries 
                Title="Item2"
                ItemsSource="{Binding ChartItems2}" 
                IndependentValueBinding="{Binding Name}" 
                DependentValueBinding="{Binding Value}" 
                IsSelectionEnabled="True" />
        </Charting:Chart>
        <!-- 画面右部分のチャート -->
        <!-- 異なる種類のグラフを複数指定してみる -->
        <Charting:Chart Grid.Column="1" Grid.Row="1">
            <!-- 円グラフ -->
            <Charting:PieSeries 
                ItemsSource="{Binding ChartItems1}" 
                IndependentValueBinding="{Binding Name}" 
                DependentValueBinding="{Binding Value}"
                IsSelectionEnabled="True"/>
            <!-- 領域グラフ？ -->
            <Charting:AreaSeries
                ItemsSource="{Binding ChartItems1}" 
                IndependentValueBinding="{Binding Name}" 
                DependentValueBinding="{Binding Value}"
                IsSelectionEnabled="True"/>
        </Charting:Chart>
    </Grid>
</prism:VisualStateAwarePage>
