//*******************************************************************************
//   Copyright 2011 Guy Barker
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//*******************************************************************************

///////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// UI Automation Client Sample.
// 
// IMPORTANT: This is a C# sample which demonstrates use of the unmanaged Windows 7 UI Automation API.
// An interop layer is generated with a custom build step which calls tlbimp.exe to process the unmanaged
// COM UIAutomationCore.dll. By doing this, references to the UIAutomationCore interop namespace can be 
// added to the C# code.
//
// It is important to note that this sample does not use the managed UI Automation API which is included 
// in the .NET Framework. Nor does it use a managed wrapper for the Windows 7 unmanaged UI Automation 
// which has been structured in such a way as to be usable by C# clients which have been build to use 
// the managed UIA API.
//
//
// This sample application demonstrates some of the more commonly used parts of the 
// Windows 7 UI Automation client API. The sample retrieves a list of hyperlinks shown 
// in an already-running browser application and presents those hyperlinks in its own UI. 
// When a hyperlink is selected in the sample application's UI, the sample will highlight 
// the link shown in the browser window, (using the Windows Magnification API.) The sample 
// can also invoke the hyperlinks in the browser window and react to notifications sent by 
// the browser to have the sample's list of hyperlinks automatically refreshed.
//
// This include use of the following interfaces:
//     IUIAutomation
//     IUIAutomationElement
//     IUIAutomationCacheRequest
//     IUIAutomationCondition   
//     IUIAutomationElementArray
//     IUIAutomationTreeWalker
//
// The sample does not make use of any of the following:
//     IUIAutomationRegistrar or custom client-side proxies
//     Text Patterns
//     Virtualized items
//     LegacyIAccessible
//
// *** Note: Threading issues are important to the implementation of a UIA client.
// For example, if a UIA client interacts with its own UI, then UIA client calls must
// be made from a background MTA thread which does not own any windows. Also, all UIA 
// event handlers must run in a background MTA thread, (and a call to remove a handler 
// must be made on the same thread that on which the matching add-related call was made.) 
// The following link relates to how threading affects the use of UIAutomation:
//     http://msdn.microsoft.com/en-us/library/ee671692(v=VS.85).aspx
//
// Other UIA sample code can be found at:
//     http://msdn.microsoft.com/en-us/library/ff625919(v=VS.85).aspx
//
// In practice, even if an app does not use UIA to interact with its own UI, once an 
// event handler has been introduced, the app is most robust when it doesn't make any
// UIA calls on its main UI thread. As such, this app makes all calls to UIA on a 
// background MTA thread.
//
//
// This sample app has four threads of interest.
//
// (1) The main UI thread. Only this thread can update the UI shown in the sample app.
// (2) A background MTA thread on which all calls to UIA are made, (other than those relating to the event handler.)
// (3) A background MTA thread used to add and remove a UIA event handler.
// (4) A background MTA thread created by UIA itself, on which our event handler is called.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////

// Win7UIAClientForm.cs : Defines the entry point for the application and control the sample's own UI.

using System;
using System.Threading;
using System.Collections.Generic;
using System.Windows.Forms;

namespace Win7UIAClientManaged
{
    // Win7UIAClientForm is the main UI of the sample app. No calls to UIA are made in this file.
    public partial class Win7UIAClientForm_LinkProcessor : Form
    {
        private LinkProcessor _linkProcessor;
        private SampleEventHandler _sampleEventHandler;
        private Highlight _highlight;

        // SampleUIListUpdateDelegate() is used to update the UI following a 
        // list of hyperlinks being generated by the background worked thread.
        public delegate void SampleUIListUpdateDelegate(object itemList);

        // SampleUIEventHandlerDelegate is used to allow the main UI thread to be
        // notified by the UIA event handler thread when action is to be taken.
        public delegate void SampleUIEventHandlerDelegate();

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Win7UIAClientForm() - Constructor.
        //
        // Note that all methods in this calss run on the main UI thread.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        public Win7UIAClientForm_LinkProcessor()
        {
            InitializeComponent();

            InitializeSample();

            this.listViewLinks.SelectedIndexChanged += new EventHandler(listViewLinks_SelectedIndexChanged);

            this.FormClosed += new FormClosedEventHandler(Win7UIAClientForm_FormClosed);

            // Also show a list of hyperlinks when the app starts.
            PopulateListOfLinks();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // InitializeSample() 
        //
        // Create all sample objects responsible for interacting with UIA and highlighting hyperlinks.
        //
        // Note that this sample app assumes that all required operations succeed. A shipping app 
        // would need the appropriate error handling in place.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        void InitializeSample()
        {
            // Initialize the highlighting used to magnify hyperlinks in the browser window.
            _highlight = new Highlight();
            _highlight.Initialize();

            // Initialize the object which will make all the UIA calls on a background MTA thread.
            _linkProcessor = new LinkProcessor();
            _linkProcessor.Initialize(new SampleUIListUpdateDelegate(UpdateListOnUIThread), listViewLinks, _highlight);

            // Initialize the event handler which is called when the UIA tree structure changes in the browser window.
            SampleUIEventHandlerDelegate sampleUIEventHandlerDelegate = new SampleUIEventHandlerDelegate(HandleEventOnUIThread);
            _sampleEventHandler = new SampleEventHandler(this, sampleUIEventHandlerDelegate);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Win7UIAClientForm_FormClosed() 
        //
        // Uninitialize and release everything created on startup.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        void Win7UIAClientForm_FormClosed(object sender, FormClosedEventArgs e)
        {
            if (_linkProcessor != null)
            {
                _linkProcessor.Uninitialize();
                _linkProcessor = null;
            }

            if (_highlight != null)
            {
                _highlight.Uninitialize();
                _highlight = null;
            }

            if (_sampleEventHandler != null)
            {
                _sampleEventHandler.Uninitialize();
                _sampleEventHandler = null;
            }

            // Give any background threads created on startup a chance to close down gracefully.
            Thread.Sleep(200);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Various button click handlers...
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private void buttonClose_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void buttonRefresh_Click(object sender, EventArgs e)
        {
            // Refresh the list of hyperlinks shown in the UI.
            PopulateListOfLinks();
        }

        private void buttonInvoke_Click(object sender, EventArgs e)
        {
            // Deselect whatever link is currently selected.
            _highlight.Clear();

            // Invoke the current hyperlink selected in the list of hyperlinks.
            if (listViewLinks.SelectedIndices.Count > 0)
            {
                int idxLink = listViewLinks.SelectedIndices[0];
                bool fUseCache = checkBoxUseCaching.Checked;

                _linkProcessor.InvokeLink(idxLink, fUseCache);
            }
        }

        private void buttonAddEventHandler_Click(object sender, EventArgs e)
        {
            // Add an event handler such that we get notified when the UIA tree structure
            // changes in the browser window.

            if (_sampleEventHandler != null)
            {
                _sampleEventHandler.StartEventHandler();

                buttonAddEventHandler.Enabled = false;
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Various checkbox checked handlers...
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private void checkboxAlwaysOnTop_CheckedChanged(object sender, EventArgs e)
        {
            this.TopMost = checkboxAlwaysOnTop.Checked;
        }

        private void checkBoxUseCaching_CheckedChanged(object sender, EventArgs e)
        {
            // Repopulate the list of hyperlinks shown, either using or not using UIA caching
            // depending on the current state of the UI.
            PopulateListOfLinks();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // listViewLinks_SelectedIndexChanged()
        //
        // Highlight the hyerlink currently selected in our list of hyperlinks.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private void listViewLinks_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (listViewLinks.SelectedIndices.Count > 0)
            {
                int idxLink = listViewLinks.SelectedIndices[0];
                bool fUseCache = checkBoxUseCaching.Checked;

                _linkProcessor.HighlightLink(idxLink, fUseCache);
            }
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // PopulateListOfLinks()
        //
        // Refresh the list of hyperlinks shown.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private void PopulateListOfLinks()
        {
            _highlight.Clear();

            bool fUseCache = checkBoxUseCaching.Checked;
            bool fSearchLinkChildren = checkBoxSearchLinkChildren.Checked;

            _linkProcessor.BuildListOfHyperlinksFromWindow(fUseCache, fSearchLinkChildren);
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // UpdateListOnUIThread() 
        //
        // This is invoked on the main UI thread by the LinkProcessor object when the list of 
        // hyperlinks should be repopulated. (The LinkProcessor called UIA on a background MTA
        // thread in order to generate the supplied list of hyperlinks.) 
        //
        // Only the main UI thread can update the UI shown in the sample app.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private void UpdateListOnUIThread(object itemList)
        {
            // The LinkProcessor provides us with a list of items which contain
            // the name to be shown for the hyperlink, and a reference to the 
            // UIA element representing the hyperlink.

            listViewLinks.BeginUpdate();
            listViewLinks.Items.Clear();

            foreach(LinkProcessor.LinkItem item in (List<LinkProcessor.LinkItem>)itemList)
            {          
                ListViewItem listviewitem = listViewLinks.Items.Add(item.linkName);
                listviewitem.Tag = item.element;                
            } 
                    
            listViewLinks.EndUpdate();
            listViewLinks.Refresh();

            // Show the number of hyperlinks in a label beneath the list.
            labelLinkCountValue.Text = listViewLinks.Items.Count.ToString();
        }

        /////////////////////////////////////////////////////////////////////////////////////////////////
        //
        // HandleEventOnUIThread() 
        //
        // This is invoked on the main UI thread by the sample UIA event handler when the structure
        // of elements in the browser window has changed. (The event handler itself runs on a background 
        // MTA created by UIA.)
        //
        // Only the main UI thread can update the UI shown in the sample app.
        //
        /////////////////////////////////////////////////////////////////////////////////////////////////
        private void HandleEventOnUIThread()
        {
            PopulateListOfLinks();
        }
    }
}
