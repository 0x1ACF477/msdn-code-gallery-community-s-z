// =====================================================================
//  This file is part of the Microsoft Dynamics CRM SDK code samples.
//
//  Copyright (C) Microsoft Corporation.  All rights reserved.
//
//  This source code is intended only as a supplement to Microsoft
//  Development Tools and/or on-line documentation.  See these other
//  materials for detailed information regarding Microsoft code samples.
//
//  THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//  PARTICULAR PURPOSE.
// =====================================================================
Sdk = window.Sdk || { __namespace: !0 }; Sdk.md = window.Sdk.md || { __namespace: !0 }; Sdk.md.Task = { ActivityId: { Name: "ActivityId", AttributeType: Sdk.Guid }, ActualDurationMinutes: { Name: "ActualDurationMinutes", AttributeType: Sdk.Int }, ActualEnd: { Name: "ActualEnd", AttributeType: Sdk.DateTime }, ActualStart: { Name: "ActualStart", AttributeType: Sdk.DateTime }, Category: { Name: "Category", AttributeType: Sdk.String }, CreatedBy: { Name: "CreatedBy", AttributeType: Sdk.Lookup }, CreatedOn: { Name: "CreatedOn", AttributeType: Sdk.DateTime }, CreatedOnBehalfBy: { Name: "CreatedOnBehalfBy", AttributeType: Sdk.Lookup }, Description: { Name: "Description", AttributeType: Sdk.String }, ExchangeRate: { Name: "ExchangeRate", AttributeType: Sdk.Decimal }, ImportSequenceNumber: { Name: "ImportSequenceNumber", AttributeType: Sdk.Int }, IsBilled: { Name: "IsBilled", AttributeType: Sdk.Boolean }, IsRegularActivity: { Name: "IsRegularActivity", AttributeType: Sdk.Boolean }, IsWorkflowCreated: { Name: "IsWorkflowCreated", AttributeType: Sdk.Boolean }, ModifiedBy: { Name: "ModifiedBy", AttributeType: Sdk.Lookup }, ModifiedOn: { Name: "ModifiedOn", AttributeType: Sdk.DateTime }, ModifiedOnBehalfBy: { Name: "ModifiedOnBehalfBy", AttributeType: Sdk.Lookup }, OverriddenCreatedOn: { Name: "OverriddenCreatedOn", AttributeType: Sdk.DateTime }, OwnerId: { Name: "OwnerId", AttributeType: Sdk.Lookup }, OwningBusinessUnit: { Name: "OwningBusinessUnit", AttributeType: Sdk.Lookup }, OwningTeam: { Name: "OwningTeam", AttributeType: Sdk.Lookup }, OwningUser: { Name: "OwningUser", AttributeType: Sdk.Lookup }, PercentComplete: { Name: "PercentComplete", AttributeType: Sdk.Int }, PriorityCode: { Name: "PriorityCode", AttributeType: Sdk.OptionSet }, ProcessId: { Name: "ProcessId", AttributeType: Sdk.Guid }, RegardingObjectId: { Name: "RegardingObjectId", AttributeType: Sdk.Lookup }, ScheduledDurationMinutes: { Name: "ScheduledDurationMinutes", AttributeType: Sdk.Int }, ScheduledEnd: { Name: "ScheduledEnd", AttributeType: Sdk.DateTime }, ScheduledStart: { Name: "ScheduledStart", AttributeType: Sdk.DateTime }, ServiceId: { Name: "ServiceId", AttributeType: Sdk.Lookup }, StageId: { Name: "StageId", AttributeType: Sdk.Guid }, StateCode: { Name: "StateCode", AttributeType: Sdk.OptionSet }, StatusCode: { Name: "StatusCode", AttributeType: Sdk.OptionSet }, Subcategory: { Name: "Subcategory", AttributeType: Sdk.String }, Subject: { Name: "Subject", AttributeType: Sdk.String }, SubscriptionId: { Name: "SubscriptionId", AttributeType: Sdk.Guid }, TimeZoneRuleVersionNumber: { Name: "TimeZoneRuleVersionNumber", AttributeType: Sdk.Int }, TransactionCurrencyId: { Name: "TransactionCurrencyId", AttributeType: Sdk.Lookup }, UTCConversionTimeZoneCode: { Name: "UTCConversionTimeZoneCode", AttributeType: Sdk.Int }, VersionNumber: { Name: "VersionNumber", AttributeType: Sdk.Long } }, function () { this.Task = function (n) { if (!(this instanceof Sdk.Task)) return new Sdk.Task(n); if (Sdk.Entity.call(this), this.setType("task"), typeof n != "undefined" && n != null) if (n instanceof Sdk.Entity) if (n.getType() == this.getType()) this.setAttributes(n.getAttributes()), this.setFormattedValues(n.getFormattedValues()), this.setRelatedEntities(n.getRelatedEntities()), n.getId() != null && this.setId(n.getId()); else throw new Error("Invalid type Sdk.Task entity constructor parameter must be an Sdk.Entity of Type task"); else throw new Error("Invalid argument Sdk.Task entity constructor parameter must be an Sdk.Entity"); this.initializeSubClass(Sdk.md.Task) } }.call(Sdk); Sdk.Task.prototype = new Sdk.Entity("task"), function () { this.OneToMany = { task_activity_parties: "task_activity_parties", Task_Annotation: "Task_Annotation", Task_AsyncOperations: "Task_AsyncOperations", Task_BulkDeleteFailures: "Task_BulkDeleteFailures", task_connections1: "task_connections1", task_connections2: "task_connections2", Task_DuplicateBaseRecord: "Task_DuplicateBaseRecord", Task_DuplicateMatchingRecord: "Task_DuplicateMatchingRecord", task_PostFollows: "task_PostFollows", task_PostRegardings: "task_PostRegardings", task_PostRoles: "task_PostRoles", task_principalobjectattributeaccess: "task_principalobjectattributeaccess", Task_ProcessSessions: "Task_ProcessSessions", Task_QueueItem: "Task_QueueItem", userentityinstancedata_task: "userentityinstancedata_task" } }.call(Sdk.Task)
