// =====================================================================
//  This file is part of the Microsoft Dynamics CRM SDK code samples.
//
//  Copyright (C) Microsoft Corporation.  All rights reserved.
//
//  This source code is intended only as a supplement to Microsoft
//  Development Tools and/or on-line documentation.  See these other
//  materials for detailed information regarding Microsoft code samples.
//
//  THIS CODE AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY
//  KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//  PARTICULAR PURPOSE.
// =====================================================================
"use strict"; Sdk.Mdq = Sdk.Mdq || { __namespace: !0 }, Sdk.Mdq.ValueEnums = Sdk.Mdq.ValueEnums || { __namespace: !0 }, function () { this.RetrieveMetadataChangesRequest = function (n, t, i) { function o(n) { if (n instanceof Sdk.Mdq.EntityQueryExpression) e = n; else throw new Error("Sdk.RetrieveMetadataChangesRequest.Query requires a Sdk.Mdq.EntityQueryExpression."); } function s(n) { if (n == null) u = n; else if (typeof n == "string") u = n; else throw new Error("Sdk.RetrieveMetadataChangesRequest ClientVersionStamp requires a string value or a null value."); } function h(n) { if (n == null) r = n; else if (n >= 1 && n <= 31) r = n; else throw new Error("Sdk.RetrieveMetadataChangesRequest DeletedMetadataFilters must be null or a number between 1 and 31."); } function c() { var i = "Entity", n, t; return r != null && (n = [], (1 & r) == 1 && n.push("Entity"), (2 & r) == 2 && n.push("Attribute"), (4 & r) == 4 && n.push("Relationship"), (8 & r) == 8 && n.push("Label"), (16 & r) == 16 && n.push("OptionSet"), i = n.join(" ")), t = "", u != null && r != null && (t = ["<a:KeyValuePairOfstringanyType>", "<b:key>DeletedMetadataFilters</b:key>", '<b:value i:type="j:DeletedMetadataFilters">', i, "</b:value>", "</a:KeyValuePairOfstringanyType>"].join("")), t } function l() { return u == null ? "" : ["<a:KeyValuePairOfstringanyType>", "<b:key>ClientVersionStamp</b:key>", '<b:value i:type="c:string" >' + u + "</b:value>", "</a:KeyValuePairOfstringanyType>"].join("") } function f() { return ['<d:request i:type="a:RetrieveMetadataChangesRequest">', "<a:Parameters>", "<a:KeyValuePairOfstringanyType>", "<b:key>Query</b:key>", e.toXml(), "</a:KeyValuePairOfstringanyType>", l(), c(), "</a:Parameters>", '<a:RequestId i:nil="true" />', "<a:RequestName>RetrieveMetadataChanges</a:RequestName>", "</d:request>"].join("") } if (!(this instanceof Sdk.RetrieveMetadataChangesRequest)) return new Sdk.RetrieveMetadataChangesRequest(n, t, i); Sdk.OrganizationRequest.call(this); var e = null, u = null, r = null; typeof n != "undefined" && o(n), typeof t != "undefined" && s(t), typeof i != "undefined" && h(i), this.setResponseType(Sdk.RetrieveMetadataChangesResponse), this.setRequestXml(f()), this.setQuery = function (n) { o(n), this.setRequestXml(f()) }, this.setClientVersionStamp = function (n) { s(n), this.setRequestXml(f()) }, this.setDeletedMetadataFilters = function (n) { h(n), this.setRequestXml(f()) } }, this.RetrieveMetadataChangesRequest.__class = !0, this.RetrieveMetadataChangesResponse = function (n) { function e(n) { for (var t = 0; t < f.length; t++) if (n == f[t]) return !0; return !1 } function t(n) { var h, f, o, s, r, u, i; if (n.attributes != null && n.attributes.length == 1 && n.attributes.getNamedItem("i:nil") != null && n.attributes.getNamedItem("i:nil").nodeValue == "true") return null; if (n.firstChild != null && n.firstChild.nodeType == 3) { h = Sdk.Xml.getNodeName(n); switch (h) { case "ActivityTypeMask": case "ColumnNumber": case "DefaultFormValue": case "LanguageCode": case "MaxLength": case "MaxValue": case "MinValue": case "MobileClientAccessLevelMask": case "ObjectTypeCode": case "Order": case "Precision": case "PrecisionSource": return parseInt(n.firstChild.nodeValue, 10); case "AutoCreateAccessTeams": case "AutoRouteToOwnerQueue": case "CanBeBasic": case "CanBeChanged": case "CanBeDeep": case "CanBeGlobal": case "CanBeLocal": case "CanBeSecuredForCreate": case "CanBeSecuredForRead": case "CanBeSecuredForUpdate": case "CanTriggerWorkflow": case "IsActivity": case "IsActivityParty": case "IsAIRUpdated": case "IsAvailableOffline": case "IsBusinessProcessEnabled": case "IsChildEntity": case "IsCustomAttribute": case "IsCustomEntity": case "IsCustomOptionSet": case "IsCustomRelationship": case "IsDocumentManagementEnabled": case "IsEnabledForCharts": case "IsEnabledForTrace": case "IsGlobal": case "IsImportable": case "IsIntersect": case "IsManaged": case "IsManaged": case "IsPrimaryId": case "IsPrimaryName": case "IsQuickCreateEnabled": case "IsReadingPaneEnabled": case "IsSecured": case "IsValidForAdvancedFind": case "IsValidForCreate": case "IsValidForRead": case "IsValidForUpdate": case "IsVisibleInMobileClient": return n.firstChild.nodeValue == "true" ? !0 : !1; case "Value": return n.firstChild.nodeValue == "true" || n.firstChild.nodeValue == "false" ? n.firstChild.nodeValue == "true" ? !0 : !1 : n.firstChild.nodeValue == "ApplicationRequired" || n.firstChild.nodeValue == "None" || n.firstChild.nodeValue == "Recommended" || n.firstChild.nodeValue == "SystemRequired" ? n.firstChild.nodeValue : (f = parseInt(n.firstChild.nodeValue, 10), isNaN(f) ? n.firstChild.nodeValue : f); default: return n.firstChild.nodeValue } } if (e(Sdk.Xml.getNodeName(n))) { for (o = [], i = 0; i < n.childNodes.length; i++) s = n.childNodes[i].attributes != null && n.childNodes[i].attributes.getNamedItem("i:type") != null ? n.childNodes[i].attributes.getNamedItem("i:type").nodeValue.split(":")[1] : Sdk.Xml.getNodeName(n.childNodes[i]), r = t(n.childNodes[i]), typeof r != "string" && typeof r != "number" && (r._type = s), o.push(r); return o } if (n.childNodes.length == 0) return null; for (u = {}, n.attributes.getNamedItem("i:type") != null && (u._type = n.attributes.getNamedItem("i:type").nodeValue.split(":")[1]), i = 0; i < n.childNodes.length; i++) u[Sdk.Xml.getNodeName(n.childNodes[i])] = n.childNodes[i].nodeType == 3 ? n.childNodes[i].nodeValue : t(n.childNodes[i]); return u } function o(n) { for (var f = [], e = Sdk.Xml.selectSingleNode(n, "//a:KeyValuePairOfstringanyType[b:key='EntityMetadata']/b:value"), u, r = 0; r < e.childNodes.length; r++) u = t(e.childNodes[r]), u._type = "EntityMetadata", f.push(u); i = f } function s(n) { r = Sdk.Xml.selectSingleNodeText(n, "//a:KeyValuePairOfstringanyType[b:key='ServerVersionStamp']/b:value") } function h() { var e = {}, o = Sdk.Xml.selectSingleNode(n, "//a:KeyValuePairOfstringanyType[b:key='DeletedMetadata']/b:value"), r, i, f, s; if (o != null) for (r = 0; r < o.childNodes.length; r++) for (i = o.childNodes[r].firstChild, e[_getNodeText(i)] = [], f = 0; f < i.nextSibling.childNodes.length; f++) s = _getNodeText(i.nextSibling.childNodes[f]), e[_getNodeText(i)].push(s); u = e } if (!(this instanceof Sdk.RetrieveMetadataChangesResponse)) return new Sdk.RetrieveMetadataChangesResponse(n); Sdk.OrganizationResponse.call(this); var i = null, r = null, u = null, f = ["Attributes", "ManyToManyRelationships", "ManyToOneRelationships", "OneToManyRelationships", "Privileges", "LocalizedLabels", "Options", "Targets"]; this.getEntityMetadata = function () { return i }, this.getServerVersionStamp = function () { return r }, this.getDeletedMetadata = function () { return u }, o(n), s(n), h(n) }, this.RetrieveMetadataChangesResponse.__class = !0 }.call(Sdk), function () { this.AttributeMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.AttributeQueryExpression = function (n, t) { if (!(this instanceof Sdk.Mdq.AttributeQueryExpression)) return new Sdk.Mdq.AttributeQueryExpression(n, t); Sdk.Mdq.MetadataQueryExpression.call(this, n, t) }, this.AttributeQueryExpression.__class = !0, this.DeletedMetadataFilters = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.EntityMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.EntityQueryExpression = function (n, t, i, r, u) { function s(n) { if (n == null) f = null; else if (n instanceof Sdk.Mdq.AttributeQueryExpression) f = n; else throw new Error("Sdk.Mdq.EntityQueryExpression attributeQuery must be an Sdk.Mdq.AttributeQueryExpression"); } function h(n) { if (n == null) e = null; else if (n instanceof Sdk.Mdq.RelationshipQueryExpression) e = n; else throw new Error("Sdk.Mdq.EntityQueryExpression relationshipQuery must be an Sdk.Mdq.RelationshipQueryExpression"); } function c(n) { if (n == null) o = null; else if (n instanceof Sdk.Mdq.LabelQueryExpression) o = n; else throw new Error("Sdk.Mdq.EntityQueryExpression labelQuery must be an Sdk.Mdq.LabelQueryExpression"); } if (!(this instanceof Sdk.Mdq.EntityQueryExpression)) return new Sdk.Mdq.EntityQueryExpression(n, t, i, r, u); Sdk.Mdq.MetadataQueryExpression.call(this, n, t); var f = null, e = null, o = null; typeof i != "undefined" && s(i), typeof r != "undefined" && h(r), typeof u != "undefined" && c(u), this.getAttributeQuery = function () { return f }, this.setAttributeQuery = function (n) { s(n) }, this.getRelationshipQuery = function () { return e }, this.setRelationshipQuery = function (n) { h(n) }, this.getLabelQuery = function () { return o }, this.setLabelQuery = function (n) { c(n) } }, this.EntityQueryExpression.__class = !0, this.GuidValue = function (n) { if (!(this instanceof Sdk.Metadata.Query.GuidValue)) return new Sdk.Metadata.Query.GuidValue(n); var t = null; if (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(n)) t = n; else throw new Error("Value passed as a Guid Value is not a valid Guid."); this.value = t }, this.GuidValue.__class = !0, this.LabelQueryExpression = function (n) { function r(n) { if (typeof n != "undefined" && typeof n == "number") t.add(n); else throw new Error("Sdk.Mdq.LabelQueryExpression language must be a number."); } function i(n) { var r = "Sdk.Mdq.LabelQueryExpression languages must be an array of numbers.", i; if (typeof n != "undefined" && typeof n.push == "function") { for (i = 0; i < n.length; i++) if (typeof n[i] != "number") throw new Error(r); t.addRange(n) } else throw new Error(r); } function u(n) { if (typeof n == "number") t.remove(n); else throw new Error("Sdk.Mdq.LabelQueryExpression languages must be LCID number values."); } if (!(this instanceof Sdk.Mdq.LabelQueryExpression)) return new Sdk.Mdq.LabelQueryExpression(n); var t = new Sdk.Collection(Number); typeof n != "undefined" && i(n), this.getLanguages = function () { return t }, this.addLanguage = function (n) { r(n) }, this.addLanguages = function (n) { i(n) }, this.removeLanguage = function (n) { u(n) } }, this.LabelQueryExpression.__class = !0, this.LogicalOperator = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.MetadataConditionExpression = function (n, t, i) { function a(n) { var h, a, t, i; if (e == null) throw new Error(b); for (h = !1, a = ["AttributeType", "OwnershipType", "RequiredLevel", "Format", "ImeMode", "SecurityTypes"], t = 0; t < a.length; t++) if (e == a[t]) { h = !0, f = s.Metadata; break } if (h) switch (e) { case "AttributeType": r = "AttributeTypeCode"; break; case "OwnershipType": r = "OwnershipTypes"; break; case "RequiredLevel": r = "AttributeRequiredLevel"; break; case "Format": var c = !1, v = !1, y = !1; for (t in Sdk.Mdq.ValueEnums.DateTimeFormat) if (u == t) { r = "DateTimeFormat", c = !0; break } if (!c) for (t in Sdk.Mdq.ValueEnums.IntegerFormat) if (u == t) { v = !0, r = "IntegerFormat"; break } if (!c && !v) for (t in Sdk.Mdq.ValueEnums.StringFormat) if (u == t) { y = !0, r = "StringFormat"; break } if (!c && !v && !y) throw new Error("Unexpected attribute Format metadata enumeration."); break; case "ImeMode": r = "ImeMode"; break; case "SecurityTypes": r = "SecurityTypes" } else (typeof n == "string" || typeof n == "number" || typeof n == "boolean") && (r = typeof n == "number" ? "int" : typeof n); if (o = typeof n == "object" && typeof n.push == "function", o && !h) if (f = s.Arrays, n.length > 0) if (i = typeof n[0], i == "string" || i == "number" || i == "boolean") r = i == "number" ? "int" : i; else throw new Error("Cannot determine the type of items in an array passed as a value to a Sdk.Mdq.MetadataConditionExpression."); else throw new Error(l); o || h || (f = s.XMLSchema) } function v(n) { if (typeof n == "string") e = n, u != null && a(u); else throw new Error(p); } function k(n) { for (var t in Sdk.Mdq.MetadataConditionOperator) if (n == t) return !0; return !1 } function c(n) { if (n == null) h = n; else if (k(n)) h = n; else throw new Error(w); } function y(n) { if (n == null) u = null, r = "null"; else if (n instanceof Sdk.Mdq.GuidValue) u = n.value, r = "guid", f = s.Serialization; else { if (typeof n == "undefined" || n == null || typeof n != "string" && typeof n != "number" && typeof n != "boolean" && typeof n != "object" || typeof n == "object" && typeof n.push == "undefined" || typeof n == "object" && typeof n.push == "function" && n.length == 0) throw new Error(l); a(n), u = n } } if (!(this instanceof Sdk.Mdq.MetadataConditionExpression)) return new Sdk.Mdq.MetadataConditionExpression(n, t, i); var h = null, e = null, u = null, r = null, o = !1, s = { Serialization: "e", Arrays: "f", Metadata: "h", XMLSchema: "c" }, f = null, p = "The propertyName parameter value must be a string.", w = "The conditionOperator parameter value must be an Sdk.Mdq.MetadataConditionOperator", l = "The value parameter must be either an array, a string, a number, a boolean value, or null. If an array, it must have at least one item.", b = "The MetadataConditionExpression property name must be known to validate the MetadataConditionExpression value."; typeof n != undefined && v(n), typeof t != undefined && c(t), typeof i != undefined && y(i), this.getConditionOperator = function () { return h }, this.setConditionOperator = function (n) { c(n) }, this.getPropertyName = function () { return e }, this.setPropertyName = function (n) { v(n) }, this.getValue = function () { return u }, this.setValue = function (n) { y(n) }, this.getValueType = function () { return r }, this.getValueIsArray = function () { return o }, this.getValueNamespace = function () { return f } }, this.MetadataConditionExpression.__class = !0, this.MetadataConditionOperator = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.MetadataFilterExpression = function (n) { function e(n) { if (n instanceof Sdk.Mdq.MetadataConditionExpressionCollection) t = n; else throw new Error("Sdk.Mdq.MetadataFilterExpression Conditions requires a Sdk.Mdq.MetadataConditionExpressionCollection."); } function u(n) { if (n != null && (n == "Or" || n == "And")) i = n; else throw new Error("Sdk.Mdq.MetadataFilterExpression FilterOperator requires a Sdk.Mdq.LogicalOperator."); } function f(n) { t.add(n) } function o() { t.addRange(conditions) } function s() { if (!(filter instanceof Sdk.Mdq.MetadataFilterExpression)) throw new Error("Sdk.Mdq.MetadataFilterExpression addFilter filter parameter requires a Sdk.Mdq.MetadataFilterExpression)"); r.add(filter) } if (!(this instanceof Sdk.Mdq.MetadataFilterExpression)) return new Sdk.Mdq.MetadataFilterExpression(n); var i = Sdk.Mdq.LogicalOperator.And, t = new Sdk.Collection(Sdk.Mdq.MetadataConditionExpression), r = new Sdk.Collection(Sdk.Mdq.MetadataFilterExpression); typeof n != "undefined" && u(n), this.addCondition = function (n, t, i) { n instanceof Sdk.Mdq.MetadataConditionExpression ? f(n) : f(new Sdk.Mdq.MetadataConditionExpression(n, t, i)) }, this.addConditions = function (n) { o(n) }, this.addFilter = function (n) { s(n) }, this.getConditions = function () { return t }, this.setConditions = function (n) { e(n) }, this.getFilterOperator = function () { return i }, this.setFilterOperator = function (n) { u(n) }, this.getFilters = function () { return r } }, this.MetadataFilterExpression.__class = !0, this.MetadataPropertiesExpression = function (n, t) { function u(n) { if (typeof n == "boolean") r = n; else throw new Error("The Sdk.Mdq.MetadataPropertiesExpression allProperties  must be an Boolean value."); } function f(n) { if (typeof n.push != "undefined") i = new Sdk.Collection(String, n); else throw new Error("The Sdk.Mdq.MetadataPropertiesExpression propertyNames  must be an Array."); } if (!(this instanceof Sdk.Mdq.MetadataPropertiesExpression)) return new Sdk.Mdq.MetadataPropertiesExpression(n, t); var r = !0, i = new Sdk.Collection(String); typeof n != "undefined" && u(n), typeof t != "undefined" && f(t), this.addProperty = function (n) { i.add(n) }, this.addProperties = function (n) { i.addRange(n) }, this.getAllProperties = function () { return r }, this.setAllProperties = function (n) { u(n) }, this.getPropertyNames = function () { return i }, this.setPropertyNames = function (n) { f(n) } }, this.MetadataPropertiesExpression.__class = !0, this.MetadataQueryExpression = function (n, t) { function u(n) { if (n instanceof Sdk.Mdq.MetadataFilterExpression) i = n; else throw new Error("Sdk.Mdq.MetadataQueryExpression Criteria  must be an Sdk.Mdq.MetadataFilterExpression"); } function f(n) { if (n instanceof Sdk.Mdq.MetadataPropertiesExpression) r = n; else throw new Error("Sdk.Mdq.MetadataQueryExpression Properties  must be an Sdk.Mdq.MetadataPropertiesExpression"); } if (!(this instanceof Sdk.Mdq.MetadataQueryExpression)) return new Sdk.Mdq.MetadataQueryExpression(n, t); var i = new Sdk.Mdq.MetadataFilterExpression, r = new Sdk.Mdq.MetadataPropertiesExpression; typeof n != "undefined" && u(n), typeof t != "undefined" && f(t), this.getCriteria = function () { return i }, this.setCriteria = function (n) { u(n) }, this.getProperties = function () { return r }, this.setProperties = function (n) { f(n) } }, this.MetadataQueryExpression.__class = !0, this.RelationshipMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.RelationshipQueryExpression = function (n, t) { if (!(this instanceof Sdk.Mdq.RelationshipQueryExpression)) return new Sdk.Mdq.RelationshipQueryExpression(n, t); Sdk.Mdq.MetadataQueryExpression.call(this, n, t) }, this.RelationshipQueryExpression.__class = !0, this.SearchableAttributeMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.SearchableEntityMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.SearchableRelationshipMetadataProperties = function () { throw new Error("Constructor not implemented this is a static enum."); } }.call(Sdk.Mdq), function () { this.OwnershipType = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.AttributeTypeCode = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.AttributeRequiredLevel = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.DateTimeFormat = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.ImeMode = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.IntegerFormat = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.SecurityTypes = function () { throw new Error("Constructor not implemented this is a static enum."); }, this.StringFormat = function () { throw new Error("Constructor not implemented this is a static enum."); } }.call(Sdk.Mdq.ValueEnums), Sdk.RetrieveMetadataChangesRequest.prototype = new Sdk.OrganizationRequest, Sdk.RetrieveMetadataChangesResponse.prototype = new Sdk.OrganizationResponse, Sdk.Mdq.AttributeMetadataProperties.prototype = { AttributeOf: "AttributeOf", AttributeType: "AttributeType", AttributeTypeName: "AttributeTypeName", CalculationOf: "CalculationOf", CanBeSecuredForCreate: "CanBeSecuredForCreate", CanBeSecuredForRead: "CanBeSecuredForRead", CanBeSecuredForUpdate: "CanBeSecuredForUpdate", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", ColumnNumber: "ColumnNumber", DefaultFormValue: "DefaultFormValue", DefaultValue: "DefaultValue", DeprecatedVersion: "DeprecatedVersion", Description: "Description", DisplayName: "DisplayName", EntityLogicalName: "EntityLogicalName", Format: "Format", FormatName: "FormatName", ImeMode: "ImeMode", IntroducedVersion: "IntroducedVersion", IsAuditEnabled: "IsAuditEnabled", IsCustomAttribute: "IsCustomAttribute", IsCustomizable: "IsCustomizable", IsManaged: "IsManaged", IsPrimaryId: "IsPrimaryId", IsPrimaryName: "IsPrimaryName", IsRenameable: "IsRenameable", IsSecured: "IsSecured", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForCreate: "IsValidForCreate", IsValidForRead: "IsValidForRead", IsValidForUpdate: "IsValidForUpdate", LinkedAttributeId: "LinkedAttributeId", LogicalName: "LogicalName", MaxLength: "MaxLength", MaxValue: "MaxValue", MetadataId: "MetadataId", MinValue: "MinValue", OptionSet: "OptionSet", Precision: "Precision", PrecisionSource: "PrecisionSource", RequiredLevel: "RequiredLevel", SchemaName: "SchemaName", Targets: "Targets", YomiOf: "YomiOf" }, Sdk.Mdq.AttributeMetadataProperties.AttributeOf = "AttributeOf", Sdk.Mdq.AttributeMetadataProperties.AttributeType = "AttributeType", Sdk.Mdq.AttributeMetadataProperties.AttributeTypeName = "AttributeTypeName", Sdk.Mdq.AttributeMetadataProperties.CalculationOf = "CalculationOf", Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForCreate = "CanBeSecuredForCreate", Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForRead = "CanBeSecuredForRead", Sdk.Mdq.AttributeMetadataProperties.CanBeSecuredForUpdate = "CanBeSecuredForUpdate", Sdk.Mdq.AttributeMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.AttributeMetadataProperties.ColumnNumber = "ColumnNumber", Sdk.Mdq.AttributeMetadataProperties.DefaultFormValue = "DefaultFormValue", Sdk.Mdq.AttributeMetadataProperties.DefaultValue = "DefaultValue", Sdk.Mdq.AttributeMetadataProperties.DeprecatedVersion = "DeprecatedVersion", Sdk.Mdq.AttributeMetadataProperties.Description = "Description", Sdk.Mdq.AttributeMetadataProperties.DisplayName = "DisplayName", Sdk.Mdq.AttributeMetadataProperties.EntityLogicalName = "EntityLogicalName", Sdk.Mdq.AttributeMetadataProperties.Format = "Format", Sdk.Mdq.AttributeMetadataProperties.FormatName = "FormatName", Sdk.Mdq.AttributeMetadataProperties.ImeMode = "ImeMode", Sdk.Mdq.AttributeMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.AttributeMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.AttributeMetadataProperties.IsCustomAttribute = "IsCustomAttribute", Sdk.Mdq.AttributeMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.AttributeMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.AttributeMetadataProperties.IsPrimaryId = "IsPrimaryId", Sdk.Mdq.AttributeMetadataProperties.IsPrimaryName = "IsPrimaryName", Sdk.Mdq.AttributeMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.AttributeMetadataProperties.IsSecured = "IsSecured", Sdk.Mdq.AttributeMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.AttributeMetadataProperties.IsValidForCreate = "IsValidForCreate", Sdk.Mdq.AttributeMetadataProperties.IsValidForRead = "IsValidForRead", Sdk.Mdq.AttributeMetadataProperties.IsValidForUpdate = "IsValidForUpdate", Sdk.Mdq.AttributeMetadataProperties.LinkedAttributeId = "LinkedAttributeId", Sdk.Mdq.AttributeMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.AttributeMetadataProperties.MaxLength = "MaxLength", Sdk.Mdq.AttributeMetadataProperties.MaxValue = "MaxValue", Sdk.Mdq.AttributeMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.AttributeMetadataProperties.MinValue = "MinValue", Sdk.Mdq.AttributeMetadataProperties.OptionSet = "OptionSet", Sdk.Mdq.AttributeMetadataProperties.Precision = "Precision", Sdk.Mdq.AttributeMetadataProperties.PrecisionSource = "PrecisionSource", Sdk.Mdq.AttributeMetadataProperties.RequiredLevel = "RequiredLevel", Sdk.Mdq.AttributeMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.AttributeMetadataProperties.Targets = "Targets", Sdk.Mdq.AttributeMetadataProperties.YomiOf = "YomiOf", Sdk.Mdq.AttributeMetadataProperties.__enum = !0, Sdk.Mdq.AttributeMetadataProperties.__flags = !0, Sdk.Mdq.AttributeQueryExpression.prototype = new Sdk.Mdq.MetadataQueryExpression, Sdk.Mdq.AttributeQueryExpression.prototype.toXml = function () { return this.getCriteria().getConditions().getCount() == 0 && this.getProperties().getPropertyNames().getCount() == 0 && this.getProperties().getAllProperties() == !1 ? '<j:AttributeQuery i:nil="true" />' : ["<j:AttributeQuery>", this.toValueXml(), "</j:AttributeQuery>"].join("") }, Sdk.Mdq.DeletedMetadataFilters.prototype = { Default: 1, Entity: 1, Attribute: 2, Relationship: 4, Label: 8, OptionSet: 16, All: 31 }, Sdk.Mdq.DeletedMetadataFilters.Default = 1, Sdk.Mdq.DeletedMetadataFilters.Entity = 1, Sdk.Mdq.DeletedMetadataFilters.Attribute = 2, Sdk.Mdq.DeletedMetadataFilters.Relationship = 4, Sdk.Mdq.DeletedMetadataFilters.Label = 8, Sdk.Mdq.DeletedMetadataFilters.OptionSet = 16, Sdk.Mdq.DeletedMetadataFilters.All = 31, Sdk.Mdq.DeletedMetadataFilters.__enum = !0, Sdk.Mdq.DeletedMetadataFilters.__flags = !0, Sdk.Mdq.EntityMetadataProperties.prototype = { ActivityTypeMask: "ActivityTypeMask", Attributes: "Attributes", AutoCreateAccessTeams: "AutoCreateAccessTeams", AutoRouteToOwnerQueue: "AutoRouteToOwnerQueue", CanBeInManyToMany: "CanBeInManyToMany", CanBePrimaryEntityInRelationship: "CanBePrimaryEntityInRelationship", CanBeRelatedEntityInRelationship: "CanBeRelatedEntityInRelationship", CanCreateAttributes: "CanCreateAttributes", CanCreateCharts: "CanCreateCharts", CanCreateForms: "CanCreateForms", CanCreateViews: "CanCreateViews", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", CanTriggerWorkflow: "CanTriggerWorkflow", Description: "Description", DisplayCollectionName: "DisplayCollectionName", DisplayName: "DisplayName", IconLargeName: "IconLargeName", IconMediumName: "IconMediumName", IconSmallName: "IconSmallName", IntroducedVersion: "IntroducedVersion", IsActivity: "IsActivity", IsActivityParty: "IsActivityParty", IsAIRUpdated: "IsAIRUpdated", IsAuditEnabled: "IsAuditEnabled", IsAvailableOffline: "IsAvailableOffline", IsBusinessProcessEnabled: "IsBusinessProcessEnabled", IsChildEntity: "IsChildEntity", IsConnectionsEnabled: "IsConnectionsEnabled", IsCustomEntity: "IsCustomEntity", IsCustomizable: "IsCustomizable", IsDocumentManagementEnabled: "IsDocumentManagementEnabled", IsDuplicateDetectionEnabled: "IsDuplicateDetectionEnabled", IsEnabledForCharts: "IsEnabledForCharts", IsImportable: "IsImportable", IsIntersect: "IsIntersect", IsMailMergeEnabled: "IsMailMergeEnabled", IsManaged: "IsManaged", IsMappable: "IsMappable", IsQuickCreateEnabled: "IsQuickCreateEnabled", IsReadingPaneEnabled: "IsReadingPaneEnabled", IsRenameable: "IsRenameable", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForQueue: "IsValidForQueue", IsVisibleInMobile: "IsVisibleInMobile", IsVisibleInMobileClient: "IsVisibleInMobileClient", LogicalName: "LogicalName", ManyToManyRelationships: "ManyToManyRelationships", ManyToOneRelationships: "ManyToOneRelationships", MetadataId: "MetadataId", ObjectTypeCode: "ObjectTypeCode", OneToManyRelationships: "OneToManyRelationships", OwnershipType: "OwnershipType", PrimaryIdAttribute: "PrimaryIdAttribute", PrimaryImageAttribute: "PrimaryImageAttribute", PrimaryNameAttribute: "PrimaryNameAttribute", Privileges: "Privileges", RecurrenceBaseEntityLogicalName: "RecurrenceBaseEntityLogicalName", ReportViewName: "ReportViewName", SchemaName: "SchemaName" }, Sdk.Mdq.EntityMetadataProperties.ActivityTypeMask = "ActivityTypeMask", Sdk.Mdq.EntityMetadataProperties.Attributes = "Attributes", Sdk.Mdq.EntityMetadataProperties.AutoCreateAccessTeams = "AutoCreateAccessTeams", Sdk.Mdq.EntityMetadataProperties.AutoRouteToOwnerQueue = "AutoRouteToOwnerQueue", Sdk.Mdq.EntityMetadataProperties.CanBeInManyToMany = "CanBeInManyToMany", Sdk.Mdq.EntityMetadataProperties.CanBePrimaryEntityInRelationship = "CanBePrimaryEntityInRelationship", Sdk.Mdq.EntityMetadataProperties.CanBeRelatedEntityInRelationship = "CanBeRelatedEntityInRelationship", Sdk.Mdq.EntityMetadataProperties.CanCreateAttributes = "CanCreateAttributes", Sdk.Mdq.EntityMetadataProperties.CanCreateCharts = "CanCreateCharts", Sdk.Mdq.EntityMetadataProperties.CanCreateForms = "CanCreateForms", Sdk.Mdq.EntityMetadataProperties.CanCreateViews = "CanCreateViews", Sdk.Mdq.EntityMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.EntityMetadataProperties.CanTriggerWorkflow = "CanTriggerWorkflow", Sdk.Mdq.EntityMetadataProperties.Description = "Description", Sdk.Mdq.EntityMetadataProperties.DisplayCollectionName = "DisplayCollectionName", Sdk.Mdq.EntityMetadataProperties.DisplayName = "DisplayName", Sdk.Mdq.EntityMetadataProperties.IconLargeName = "IconLargeName", Sdk.Mdq.EntityMetadataProperties.IconMediumName = "IconMediumName", Sdk.Mdq.EntityMetadataProperties.IconSmallName = "IconSmallName", Sdk.Mdq.EntityMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.EntityMetadataProperties.IsActivity = "IsActivity", Sdk.Mdq.EntityMetadataProperties.IsActivityParty = "IsActivityParty", Sdk.Mdq.EntityMetadataProperties.IsAIRUpdated = "IsAIRUpdated", Sdk.Mdq.EntityMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.EntityMetadataProperties.IsAvailableOffline = "IsAvailableOffline", Sdk.Mdq.EntityMetadataProperties.IsBusinessProcessEnabled = "IsBusinessProcessEnabled", Sdk.Mdq.EntityMetadataProperties.IsChildEntity = "IsChildEntity", Sdk.Mdq.EntityMetadataProperties.IsConnectionsEnabled = "IsConnectionsEnabled", Sdk.Mdq.EntityMetadataProperties.IsCustomEntity = "IsCustomEntity", Sdk.Mdq.EntityMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.EntityMetadataProperties.IsDocumentManagementEnabled = "IsDocumentManagementEnabled", Sdk.Mdq.EntityMetadataProperties.IsDuplicateDetectionEnabled = "IsDuplicateDetectionEnabled", Sdk.Mdq.EntityMetadataProperties.IsEnabledForCharts = "IsEnabledForCharts", Sdk.Mdq.EntityMetadataProperties.IsImportable = "IsImportable", Sdk.Mdq.EntityMetadataProperties.IsIntersect = "IsIntersect", Sdk.Mdq.EntityMetadataProperties.IsMailMergeEnabled = "IsMailMergeEnabled", Sdk.Mdq.EntityMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.EntityMetadataProperties.IsMappable = "IsMappable", Sdk.Mdq.EntityMetadataProperties.IsQuickCreateEnabled = "IsQuickCreateEnabled", Sdk.Mdq.EntityMetadataProperties.IsReadingPaneEnabled = "IsReadingPaneEnabled", Sdk.Mdq.EntityMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.EntityMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.EntityMetadataProperties.IsValidForQueue = "IsValidForQueue", Sdk.Mdq.EntityMetadataProperties.IsVisibleInMobile = "IsVisibleInMobile", Sdk.Mdq.EntityMetadataProperties.IsVisibleInMobileClient = "IsVisibleInMobileClient", Sdk.Mdq.EntityMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.EntityMetadataProperties.ManyToManyRelationships = "ManyToManyRelationships", Sdk.Mdq.EntityMetadataProperties.ManyToOneRelationships = "ManyToOneRelationships", Sdk.Mdq.EntityMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.EntityMetadataProperties.ObjectTypeCode = "ObjectTypeCode", Sdk.Mdq.EntityMetadataProperties.OneToManyRelationships = "OneToManyRelationships", Sdk.Mdq.EntityMetadataProperties.OwnershipType = "OwnershipType", Sdk.Mdq.EntityMetadataProperties.PrimaryIdAttribute = "PrimaryIdAttribute", Sdk.Mdq.EntityMetadataProperties.PrimaryImageAttribute = "PrimaryImageAttribute", Sdk.Mdq.EntityMetadataProperties.PrimaryNameAttribute = "PrimaryNameAttribute", Sdk.Mdq.EntityMetadataProperties.Privileges = "Privileges", Sdk.Mdq.EntityMetadataProperties.RecurrenceBaseEntityLogicalName = "RecurrenceBaseEntityLogicalName", Sdk.Mdq.EntityMetadataProperties.ReportViewName = "ReportViewName", Sdk.Mdq.EntityMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.EntityMetadataProperties.__enum = !0, Sdk.Mdq.EntityMetadataProperties.__flags = !0, Sdk.Mdq.EntityQueryExpression.prototype = new Sdk.Mdq.MetadataQueryExpression, Sdk.Mdq.EntityQueryExpression.prototype.toXml = function () { var n = this.getAttributeQuery() == null ? '<j:AttributeQuery i:nil="true" />' : this.getAttributeQuery().toXml(), t = this.getLabelQuery() == null ? '<j:LabelQuery i:nil="true" />' : this.getLabelQuery().toXml(), i = this.getRelationshipQuery() == null ? '<j:RelationshipQuery i:nil="true" />' : this.getRelationshipQuery().toXml(); return ['<b:value i:type="j:EntityQueryExpression">', this.toValueXml(), n, t, i, "</b:value>"].join("") }, Sdk.Mdq.LabelQueryExpression.prototype.toXml = function () { return this.getLanguages().getCount() == 0 ? '<j:LabelQuery i:nil="true" />' : ["<j:LabelQuery>", this.toValueXml(), "</j:LabelQuery>"].join("") }, Sdk.Mdq.LabelQueryExpression.prototype.toValueXml = function () { var n = ["<j:FilterLanguages>"]; return this.getLanguages().forEach(function (t) { n.push("<d:int>" + t + "</d:int>") }), n.push("</j:FilterLanguages>"), n.join("") }, Sdk.Mdq.LogicalOperator.prototype = { And: "And", Or: "Or" }, Sdk.Mdq.LogicalOperator.And = "And", Sdk.Mdq.LogicalOperator.Or = "Or", Sdk.Mdq.LogicalOperator.__enum = !0, Sdk.Mdq.LogicalOperator.__flags = !0, Sdk.Mdq.MetadataConditionExpression.prototype.toXml = function () { var n, t, i; if (this.getConditionOperator() == null || this.getPropertyName() == null || this.getValueType() == null) throw new Error("A Sdk.Mdq.MetadataConditionExpression has properties that are null."); if (this.getValueType() == "null") n = '<j:Value i:nil="true" />'; else if (this.getValueIsArray()) { for (t = ['<j:Value i:type="', this.getValueNamespace(), ":ArrayOf", this.getValueType(), '" >'], i = 0; i < this.getValue().length; i++) t.push(["<", this.getValueNamespace(), ":", this.getValueType(), ">", this.getValue()[i], "</", this.getValueNamespace(), ":", this.getValueType(), ">"].join("")); t.push("</j:Value>"), n = t.join("") } else n = ['<j:Value i:type="', this.getValueNamespace(), ":", this.getValueType(), '" >', this.getValue(), "</j:Value>"].join(""); return ["<j:MetadataConditionExpression>", "<j:ConditionOperator>" + this.getConditionOperator() + "</j:ConditionOperator>", "<j:PropertyName>" + this.getPropertyName() + "</j:PropertyName>", n, "</j:MetadataConditionExpression>"].join("") }, Sdk.Mdq.MetadataConditionOperator.prototype = { Equals: "Equals", NotEquals: "NotEquals", In: "In", NotIn: "NotIn", GreaterThan: "GreaterThan", LessThan: "LessThan" }, Sdk.Mdq.MetadataConditionOperator.Equals = "Equals", Sdk.Mdq.MetadataConditionOperator.NotEquals = "NotEquals", Sdk.Mdq.MetadataConditionOperator.In = "In", Sdk.Mdq.MetadataConditionOperator.NotIn = "NotIn", Sdk.Mdq.MetadataConditionOperator.GreaterThan = "GreaterThan", Sdk.Mdq.MetadataConditionOperator.LessThan = "LessThan", Sdk.Mdq.MetadataConditionOperator.__enum = !0, Sdk.Mdq.MetadataConditionOperator.__flags = !0, Sdk.Mdq.MetadataFilterExpression.prototype.toValueXml = function () { var i = "<j:Conditions />", t, n; return this.getConditions().getCount() > 0 && (n = ["<j:Conditions>"], this.getConditions().forEach(function (t) { n.push(t.toXml()) }), n.push("</j:Conditions>"), i = n.join("")), t = "<j:Filters />", this.getFilters().getCount() > 0 && (n = ["<j:Filters>"], this.getFilters().forEach(function (t) { n.push(t.toXml()) }), n.push("</j:Filters>"), t = n.join("")), [i, "<j:FilterOperator>" + this.getFilterOperator() + "</j:FilterOperator>", t].join("") }, Sdk.Mdq.MetadataPropertiesExpression.prototype.toXml = function () { var i = ["<j:AllProperties>", this.getAllProperties(), "</j:AllProperties>"].join(""), n = [], t; return this.getPropertyNames().forEach(function (t) { n.push("<f:string>" + t + "</f:string>") }), t = n.length == 0 ? "<j:PropertyNames />" : ["<j:PropertyNames>", n.join(""), "</j:PropertyNames>"].join(""), [i, t].join("") }, Sdk.Mdq.MetadataQueryExpression.prototype.toValueXml = function () { var n = ["<j:Criteria>"]; return n.push(this.getCriteria().toValueXml()), n.push("</j:Criteria>"), n.push("<j:Properties>"), n.push(this.getProperties().toXml()), n.push("</j:Properties>"), n.join("") }, Sdk.Mdq.RelationshipMetadataProperties.prototype = { AssociatedMenuConfiguration: "AssociatedMenuConfiguration", CascadeConfiguration: "CascadeConfiguration", HasChanged: "HasChanged", Entity1AssociatedMenuConfiguration: "Entity1AssociatedMenuConfiguration", Entity1IntersectAttribute: "Entity1IntersectAttribute", Entity1LogicalName: "Entity1LogicalName", Entity2AssociatedMenuConfiguration: "Entity2AssociatedMenuConfiguration", Entity2IntersectAttribute: "Entity2IntersectAttribute", Entity2LogicalName: "Entity2LogicalName", IntersectEntityName: "IntersectEntityName", IntroducedVersion: "IntroducedVersion", IsCustomizable: "IsCustomizable", IsCustomRelationship: "IsCustomRelationship", IsManaged: "IsManaged", IsValidForAdvancedFind: "IsValidForAdvancedFind", MetadataId: "MetadataId", ReferencedAttribute: "ReferencedAttribute", ReferencedEntity: "ReferencedEntity", ReferencingAttribute: "ReferencingAttribute", ReferencingEntity: "ReferencingEntity", RelationshipType: "RelationshipType", SchemaName: "SchemaName", SecurityTypes: "SecurityTypes" }, Sdk.Mdq.RelationshipMetadataProperties.AssociatedMenuConfiguration = "AssociatedMenuConfiguration", Sdk.Mdq.RelationshipMetadataProperties.CascadeConfiguration = "CascadeConfiguration", Sdk.Mdq.RelationshipMetadataProperties.HasChanged = "HasChanged", Sdk.Mdq.RelationshipMetadataProperties.Entity1AssociatedMenuConfiguration = "Entity1AssociatedMenuConfiguration", Sdk.Mdq.RelationshipMetadataProperties.Entity1IntersectAttribute = "Entity1IntersectAttribute", Sdk.Mdq.RelationshipMetadataProperties.Entity1LogicalName = "Entity1LogicalName", Sdk.Mdq.RelationshipMetadataProperties.Entity2AssociatedMenuConfiguration = "Entity2AssociatedMenuConfiguration", Sdk.Mdq.RelationshipMetadataProperties.Entity2IntersectAttribute = "Entity2IntersectAttribute", Sdk.Mdq.RelationshipMetadataProperties.Entity2LogicalName = "Entity2LogicalName", Sdk.Mdq.RelationshipMetadataProperties.IntersectEntityName = "IntersectEntityName", Sdk.Mdq.RelationshipMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.RelationshipMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.RelationshipMetadataProperties.IsCustomRelationship = "IsCustomRelationship", Sdk.Mdq.RelationshipMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.RelationshipMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.RelationshipMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.RelationshipMetadataProperties.ReferencedAttribute = "ReferencedAttribute", Sdk.Mdq.RelationshipMetadataProperties.ReferencedEntity = "ReferencedEntity", Sdk.Mdq.RelationshipMetadataProperties.ReferencingAttribute = "ReferencingAttribute", Sdk.Mdq.RelationshipMetadataProperties.ReferencingEntity = "ReferencingEntity", Sdk.Mdq.RelationshipMetadataProperties.RelationshipType = "RelationshipType", Sdk.Mdq.RelationshipMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.RelationshipMetadataProperties.SecurityTypes = "SecurityTypes", Sdk.Mdq.RelationshipMetadataProperties.__enum = !0, Sdk.Mdq.RelationshipMetadataProperties.__flags = !0, Sdk.Mdq.RelationshipQueryExpression.prototype = new Sdk.Mdq.MetadataQueryExpression, Sdk.Mdq.RelationshipQueryExpression.prototype.toXml = function () { return this.getCriteria().getConditions().getCount() == 0 && this.getProperties().getProperties().getCount() == 0 && this.getProperties().getAllProperties() == !1 ? '<j:RelationshipQuery i:nil="true" />' : ["<j:RelationshipQuery>", this.toValueXml(), "</j:RelationshipQuery>"].join("") }, Sdk.Mdq.SearchableAttributeMetadataProperties.prototype = { AttributeOf: "AttributeOf", AttributeType: "AttributeType", CalculationOf: "CalculationOf", CanBeSecuredForCreate: "CanBeSecuredForCreate", CanBeSecuredForRead: "CanBeSecuredForRead", CanBeSecuredForUpdate: "CanBeSecuredForUpdate", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", ColumnNumber: "ColumnNumber", DefaultFormValue: "DefaultFormValue", DefaultValue: "DefaultValue", DeprecatedVersion: "DeprecatedVersion", EntityLogicalName: "EntityLogicalName", Format: "Format", FormatName: "FormatName", ImeMode: "ImeMode", IntroducedVersion: "IntroducedVersion", IsAuditEnabled: "IsAuditEnabled", IsCustomAttribute: "IsCustomAttribute", IsCustomizable: "IsCustomizable", IsManaged: "IsManaged", IsPrimaryId: "IsPrimaryId", IsPrimaryName: "IsPrimaryName", IsRenameable: "IsRenameable", IsSecured: "IsSecured", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForCreate: "IsValidForCreate", IsValidForRead: "IsValidForRead", IsValidForUpdate: "IsValidForUpdate", LinkedAttributeId: "LinkedAttributeId", LogicalName: "LogicalName", MaxLength: "MaxLength", MaxValue: "MaxValue", MetadataId: "MetadataId", MinValue: "MinValue", Precision: "Precision", PrecisionSource: "PrecisionSource", RequiredLevel: "RequiredLevel", SchemaName: "SchemaName", YomiOf: "YomiOf" }, Sdk.Mdq.SearchableAttributeMetadataProperties.AttributeOf = "AttributeOf", Sdk.Mdq.SearchableAttributeMetadataProperties.AttributeType = "AttributeType", Sdk.Mdq.SearchableAttributeMetadataProperties.CalculationOf = "CalculationOf", Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForCreate = "CanBeSecuredForCreate", Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForRead = "CanBeSecuredForRead", Sdk.Mdq.SearchableAttributeMetadataProperties.CanBeSecuredForUpdate = "CanBeSecuredForUpdate", Sdk.Mdq.SearchableAttributeMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.SearchableAttributeMetadataProperties.ColumnNumber = "ColumnNumber", Sdk.Mdq.SearchableAttributeMetadataProperties.DefaultFormValue = "DefaultFormValue", Sdk.Mdq.SearchableAttributeMetadataProperties.DefaultValue = "DefaultValue", Sdk.Mdq.SearchableAttributeMetadataProperties.DeprecatedVersion = "DeprecatedVersion", Sdk.Mdq.SearchableAttributeMetadataProperties.EntityLogicalName = "EntityLogicalName", Sdk.Mdq.SearchableAttributeMetadataProperties.Format = "Format", Sdk.Mdq.SearchableAttributeMetadataProperties.FormatName = "FormatName", Sdk.Mdq.SearchableAttributeMetadataProperties.ImeMode = "ImeMode", Sdk.Mdq.SearchableAttributeMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.SearchableAttributeMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.SearchableAttributeMetadataProperties.IsCustomAttribute = "IsCustomAttribute", Sdk.Mdq.SearchableAttributeMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.SearchableAttributeMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.SearchableAttributeMetadataProperties.IsPrimaryId = "IsPrimaryId", Sdk.Mdq.SearchableAttributeMetadataProperties.IsPrimaryName = "IsPrimaryName", Sdk.Mdq.SearchableAttributeMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.SearchableAttributeMetadataProperties.IsSecured = "IsSecured", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForCreate = "IsValidForCreate", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForRead = "IsValidForRead", Sdk.Mdq.SearchableAttributeMetadataProperties.IsValidForUpdate = "IsValidForUpdate", Sdk.Mdq.SearchableAttributeMetadataProperties.LinkedAttributeId = "LinkedAttributeId", Sdk.Mdq.SearchableAttributeMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.SearchableAttributeMetadataProperties.MaxLength = "MaxLength", Sdk.Mdq.SearchableAttributeMetadataProperties.MaxValue = "MaxValue", Sdk.Mdq.SearchableAttributeMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.SearchableAttributeMetadataProperties.MinValue = "MinValue", Sdk.Mdq.SearchableAttributeMetadataProperties.Precision = "Precision", Sdk.Mdq.SearchableAttributeMetadataProperties.PrecisionSource = "PrecisionSource", Sdk.Mdq.SearchableAttributeMetadataProperties.RequiredLevel = "RequiredLevel", Sdk.Mdq.SearchableAttributeMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.SearchableAttributeMetadataProperties.YomiOf = "YomiOf", Sdk.Mdq.SearchableAttributeMetadataProperties.__enum = !0, Sdk.Mdq.SearchableAttributeMetadataProperties.__flags = !0, Sdk.Mdq.SearchableEntityMetadataProperties.prototype = { ActivityTypeMask: "ActivityTypeMask", AutoCreateAccessTeams: "AutoCreateAccessTeams", AutoRouteToOwnerQueue: "AutoRouteToOwnerQueue", CanBeInManyToMany: "CanBeInManyToMany", CanBePrimaryEntityInRelationship: "CanBePrimaryEntityInRelationship", CanBeRelatedEntityInRelationship: "CanBeRelatedEntityInRelationship", CanCreateAttributes: "CanCreateAttributes", CanCreateCharts: "CanCreateCharts", CanCreateForms: "CanCreateForms", CanCreateViews: "CanCreateViews", CanModifyAdditionalSettings: "CanModifyAdditionalSettings", CanTriggerWorkflow: "CanTriggerWorkflow", IconLargeName: "IconLargeName", IconMediumName: "IconMediumName", IconSmallName: "IconSmallName", IntroducedVersion: "IntroducedVersion", IsActivity: "IsActivity", IsActivityParty: "IsActivityParty", IsAIRUpdated: "IsAIRUpdated", IsAuditEnabled: "IsAuditEnabled", IsAvailableOffline: "IsAvailableOffline", IsBusinessProcessEnabled: "IsBusinessProcessEnabled", IsChildEntity: "IsChildEntity", IsConnectionsEnabled: "IsConnectionsEnabled", IsCustomEntity: "IsCustomEntity", IsCustomizable: "IsCustomizable", IsDocumentManagementEnabled: "IsDocumentManagementEnabled", IsDuplicateDetectionEnabled: "IsDuplicateDetectionEnabled", IsEnabledForCharts: "IsEnabledForCharts", IsImportable: "IsImportable", IsIntersect: "IsIntersect", IsMailMergeEnabled: "IsMailMergeEnabled", IsManaged: "IsManaged", IsMappable: "IsMappable", IsQuickCreateEnabled: "IsQuickCreateEnabled", IsReadingPaneEnabled: "IsReadingPaneEnabled", IsRenameable: "IsRenameable", IsValidForAdvancedFind: "IsValidForAdvancedFind", IsValidForQueue: "IsValidForQueue", IsVisibleInMobile: "IsVisibleInMobile", IsVisibleInMobileClient: "IsVisibleInMobileClient", LogicalName: "LogicalName", MetadataId: "MetadataId", ObjectTypeCode: "ObjectTypeCode", OwnershipType: "OwnershipType", PrimaryIdAttribute: "PrimaryIdAttribute", PrimaryImageAttribute: "PrimaryImageAttribute", PrimaryNameAttribute: "PrimaryNameAttribute", RecurrenceBaseEntityLogicalName: "RecurrenceBaseEntityLogicalName", ReportViewName: "ReportViewName", SchemaName: "SchemaName" }, Sdk.Mdq.SearchableEntityMetadataProperties.ActivityTypeMask = "ActivityTypeMask", Sdk.Mdq.SearchableEntityMetadataProperties.AutoCreateAccessTeams = "AutoCreateAccessTeams", Sdk.Mdq.SearchableEntityMetadataProperties.AutoRouteToOwnerQueue = "AutoRouteToOwnerQueue", Sdk.Mdq.SearchableEntityMetadataProperties.CanBeInManyToMany = "CanBeInManyToMany", Sdk.Mdq.SearchableEntityMetadataProperties.CanBePrimaryEntityInRelationship = "CanBePrimaryEntityInRelationship", Sdk.Mdq.SearchableEntityMetadataProperties.CanBeRelatedEntityInRelationship = "CanBeRelatedEntityInRelationship", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateAttributes = "CanCreateAttributes", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateCharts = "CanCreateCharts", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateForms = "CanCreateForms", Sdk.Mdq.SearchableEntityMetadataProperties.CanCreateViews = "CanCreateViews", Sdk.Mdq.SearchableEntityMetadataProperties.CanModifyAdditionalSettings = "CanModifyAdditionalSettings", Sdk.Mdq.SearchableEntityMetadataProperties.CanTriggerWorkflow = "CanTriggerWorkflow", Sdk.Mdq.SearchableEntityMetadataProperties.IconLargeName = "IconLargeName", Sdk.Mdq.SearchableEntityMetadataProperties.IconMediumName = "IconMediumName", Sdk.Mdq.SearchableEntityMetadataProperties.IconSmallName = "IconSmallName", Sdk.Mdq.SearchableEntityMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.SearchableEntityMetadataProperties.IsActivity = "IsActivity", Sdk.Mdq.SearchableEntityMetadataProperties.IsActivityParty = "IsActivityParty", Sdk.Mdq.SearchableEntityMetadataProperties.IsAIRUpdated = "IsAIRUpdated", Sdk.Mdq.SearchableEntityMetadataProperties.IsAuditEnabled = "IsAuditEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsAvailableOffline = "IsAvailableOffline", Sdk.Mdq.SearchableEntityMetadataProperties.IsBusinessProcessEnabled = "IsBusinessProcessEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsChildEntity = "IsChildEntity", Sdk.Mdq.SearchableEntityMetadataProperties.IsConnectionsEnabled = "IsConnectionsEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsCustomEntity = "IsCustomEntity", Sdk.Mdq.SearchableEntityMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.SearchableEntityMetadataProperties.IsDocumentManagementEnabled = "IsDocumentManagementEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsDuplicateDetectionEnabled = "IsDuplicateDetectionEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsEnabledForCharts = "IsEnabledForCharts", Sdk.Mdq.SearchableEntityMetadataProperties.IsImportable = "IsImportable", Sdk.Mdq.SearchableEntityMetadataProperties.IsIntersect = "IsIntersect", Sdk.Mdq.SearchableEntityMetadataProperties.IsMailMergeEnabled = "IsMailMergeEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.SearchableEntityMetadataProperties.IsMappable = "IsMappable", Sdk.Mdq.SearchableEntityMetadataProperties.IsQuickCreateEnabled = "IsQuickCreateEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsReadingPaneEnabled = "IsReadingPaneEnabled", Sdk.Mdq.SearchableEntityMetadataProperties.IsRenameable = "IsRenameable", Sdk.Mdq.SearchableEntityMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.SearchableEntityMetadataProperties.IsValidForQueue = "IsValidForQueue", Sdk.Mdq.SearchableEntityMetadataProperties.IsVisibleInMobile = "IsVisibleInMobile", Sdk.Mdq.SearchableEntityMetadataProperties.IsVisibleInMobileClient = "IsVisibleInMobileClient", Sdk.Mdq.SearchableEntityMetadataProperties.LogicalName = "LogicalName", Sdk.Mdq.SearchableEntityMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.SearchableEntityMetadataProperties.ObjectTypeCode = "ObjectTypeCode", Sdk.Mdq.SearchableEntityMetadataProperties.OwnershipType = "OwnershipType", Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryIdAttribute = "PrimaryIdAttribute", Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryImageAttribute = "PrimaryImageAttribute", Sdk.Mdq.SearchableEntityMetadataProperties.PrimaryNameAttribute = "PrimaryNameAttribute", Sdk.Mdq.SearchableEntityMetadataProperties.RecurrenceBaseEntityLogicalName = "RecurrenceBaseEntityLogicalName", Sdk.Mdq.SearchableEntityMetadataProperties.ReportViewName = "ReportViewName", Sdk.Mdq.SearchableEntityMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.SearchableEntityMetadataProperties.__enum = !0, Sdk.Mdq.SearchableEntityMetadataProperties.__flags = !0, Sdk.Mdq.SearchableRelationshipMetadataProperties.prototype = { Entity1IntersectAttribute: "Entity1IntersectAttribute", Entity1LogicalName: "Entity1LogicalName", Entity2IntersectAttribute: "Entity2IntersectAttribute", Entity2LogicalName: "Entity2LogicalName", IntersectEntityName: "IntersectEntityName", IntroducedVersion: "IntroducedVersion", IsCustomizable: "IsCustomizable", IsCustomRelationship: "IsCustomRelationship", IsManaged: "IsManaged", IsValidForAdvancedFind: "IsValidForAdvancedFind", MetadataId: "MetadataId", ReferencedAttribute: "ReferencedAttribute", ReferencedEntity: "ReferencedEntity", ReferencingAttribute: "ReferencingAttribute", ReferencingEntity: "ReferencingEntity", RelationshipType: "RelationshipType", SchemaName: "SchemaName", SecurityTypes: "SecurityTypes" }, Sdk.Mdq.SearchableRelationshipMetadataProperties.HasChanged = "HasChanged", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity1IntersectAttribute = "Entity1IntersectAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity1LogicalName = "Entity1LogicalName", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity2IntersectAttribute = "Entity2IntersectAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.Entity2LogicalName = "Entity2LogicalName", Sdk.Mdq.SearchableRelationshipMetadataProperties.IntersectEntityName = "IntersectEntityName", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsCustomizable = "IsCustomizable", Sdk.Mdq.SearchableRelationshipMetadataProperties.IntroducedVersion = "IntroducedVersion", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsCustomRelationship = "IsCustomRelationship", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsManaged = "IsManaged", Sdk.Mdq.SearchableRelationshipMetadataProperties.IsValidForAdvancedFind = "IsValidForAdvancedFind", Sdk.Mdq.SearchableRelationshipMetadataProperties.MetadataId = "MetadataId", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencedAttribute = "ReferencedAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencedEntity = "ReferencedEntity", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencingAttribute = "ReferencingAttribute", Sdk.Mdq.SearchableRelationshipMetadataProperties.ReferencingEntity = "ReferencingEntity", Sdk.Mdq.SearchableRelationshipMetadataProperties.RelationshipType = "RelationshipType", Sdk.Mdq.SearchableRelationshipMetadataProperties.SchemaName = "SchemaName", Sdk.Mdq.SearchableRelationshipMetadataProperties.SecurityTypes = "SecurityTypes", Sdk.Mdq.SearchableRelationshipMetadataProperties.__enum = !0, Sdk.Mdq.SearchableRelationshipMetadataProperties.__flags = !0, Sdk.Mdq.ValueEnums.OwnershipType.prototype = { None: "None", OrganizationOwned: "OrganizationOwned", TeamOwned: "TeamOwned", UserOwned: "UserOwned" }, Sdk.Mdq.ValueEnums.OwnershipType.None = "None", Sdk.Mdq.ValueEnums.OwnershipType.OrganizationOwned = "OrganizationOwned", Sdk.Mdq.ValueEnums.OwnershipType.TeamOwned = "TeamOwned", Sdk.Mdq.ValueEnums.OwnershipType.UserOwned = "UserOwned", Sdk.Mdq.ValueEnums.OwnershipType.__enum = !0, Sdk.Mdq.ValueEnums.OwnershipType.__flags = !0, Sdk.Mdq.ValueEnums.AttributeTypeCode.prototype = { BigInt: "BigInt", Boolean: "Boolean", CalendarRules: "CalendarRules", Customer: "Customer", DateTime: "DateTime", Decimal: "Decimal", Double: "Double", EntityName: "EntityName", Integer: "Integer", Lookup: "Lookup", ManagedProperty: "ManagedProperty", Memo: "Memo", Money: "Money", Owner: "Owner", PartyList: "PartyList", Picklist: "Picklist", State: "State", Status: "Status", String: "String", Uniqueidentifier: "Uniqueidentifier", Virtual: "Virtual" }, Sdk.Mdq.ValueEnums.AttributeTypeCode.BigInt = "BigInt", Sdk.Mdq.ValueEnums.AttributeTypeCode.Boolean = "Boolean", Sdk.Mdq.ValueEnums.AttributeTypeCode.CalendarRules = "CalendarRules", Sdk.Mdq.ValueEnums.AttributeTypeCode.Customer = "Customer", Sdk.Mdq.ValueEnums.AttributeTypeCode.DateTime = "DateTime", Sdk.Mdq.ValueEnums.AttributeTypeCode.Decimal = "Decimal", Sdk.Mdq.ValueEnums.AttributeTypeCode.Double = "Double", Sdk.Mdq.ValueEnums.AttributeTypeCode.EntityName = "EntityName", Sdk.Mdq.ValueEnums.AttributeTypeCode.Integer = "Integer", Sdk.Mdq.ValueEnums.AttributeTypeCode.Lookup = "Lookup", Sdk.Mdq.ValueEnums.AttributeTypeCode.ManagedProperty = "ManagedProperty", Sdk.Mdq.ValueEnums.AttributeTypeCode.Memo = "Memo", Sdk.Mdq.ValueEnums.AttributeTypeCode.Money = "Money", Sdk.Mdq.ValueEnums.AttributeTypeCode.Owner = "Owner", Sdk.Mdq.ValueEnums.AttributeTypeCode.PartyList = "PartyList", Sdk.Mdq.ValueEnums.AttributeTypeCode.Picklist = "Picklist", Sdk.Mdq.ValueEnums.AttributeTypeCode.State = "State", Sdk.Mdq.ValueEnums.AttributeTypeCode.Status = "Status", Sdk.Mdq.ValueEnums.AttributeTypeCode.String = "String", Sdk.Mdq.ValueEnums.AttributeTypeCode.Uniqueidentifier = "Uniqueidentifier", Sdk.Mdq.ValueEnums.AttributeTypeCode.Virtual = "Virtual", Sdk.Mdq.ValueEnums.AttributeTypeCode.__enum = !0, Sdk.Mdq.ValueEnums.AttributeTypeCode.__flags = !0, Sdk.Mdq.ValueEnums.AttributeRequiredLevel.prototype = { ApplicationRequired: "ApplicationRequired", None: "None", Recommended: "Recommended", SystemRequired: "SystemRequired" }, Sdk.Mdq.ValueEnums.AttributeRequiredLevel.ApplicationRequired = "ApplicationRequired", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.None = "None", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.Recommended = "Recommended", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.SystemRequired = "SystemRequired", Sdk.Mdq.ValueEnums.AttributeRequiredLevel.__enum = !0, Sdk.Mdq.ValueEnums.AttributeRequiredLevel.__flags = !0, Sdk.Mdq.ValueEnums.DateTimeFormat.prototype = { DateAndTime: "DateAndTime", DateOnly: "DateOnly" }, Sdk.Mdq.ValueEnums.DateTimeFormat.DateAndTime = "DateAndTime", Sdk.Mdq.ValueEnums.DateTimeFormat.DateOnly = "DateOnly", Sdk.Mdq.ValueEnums.DateTimeFormat.__enum = !0, Sdk.Mdq.ValueEnums.DateTimeFormat.__flags = !0, Sdk.Mdq.ValueEnums.ImeMode.prototype = { Active: "Active", Auto: "Auto", Disabled: "Disabled", Inactive: "Inactive" }, Sdk.Mdq.ValueEnums.ImeMode.Active = "Active", Sdk.Mdq.ValueEnums.ImeMode.Auto = "Auto", Sdk.Mdq.ValueEnums.ImeMode.Disabled = "Disabled", Sdk.Mdq.ValueEnums.ImeMode.Inactive = "Inactive", Sdk.Mdq.ValueEnums.ImeMode.__enum = !0, Sdk.Mdq.ValueEnums.ImeMode.__flags = !0, Sdk.Mdq.ValueEnums.IntegerFormat.prototype = { Duration: "Duration", Language: "Language", Locale: "Locale", None: "None", TimeZone: "TimeZone" }, Sdk.Mdq.ValueEnums.IntegerFormat.Duration = "Duration", Sdk.Mdq.ValueEnums.IntegerFormat.Language = "Language", Sdk.Mdq.ValueEnums.IntegerFormat.Locale = "Locale", Sdk.Mdq.ValueEnums.IntegerFormat.None = "None", Sdk.Mdq.ValueEnums.IntegerFormat.TimeZone = "TimeZone", Sdk.Mdq.ValueEnums.IntegerFormat.__enum = !0, Sdk.Mdq.ValueEnums.IntegerFormat.__flags = !0, Sdk.Mdq.ValueEnums.SecurityTypes.prototype = { Append: "Append", Inheritance: "Inheritance", None: "None", ParentChild: "ParentChild", Pointer: "Pointer" }, Sdk.Mdq.ValueEnums.SecurityTypes.Append = "Append", Sdk.Mdq.ValueEnums.SecurityTypes.Inheritance = "Inheritance", Sdk.Mdq.ValueEnums.SecurityTypes.None = "None", Sdk.Mdq.ValueEnums.SecurityTypes.ParentChild = "ParentChild", Sdk.Mdq.ValueEnums.SecurityTypes.Pointer = "Pointer", Sdk.Mdq.ValueEnums.SecurityTypes.__enum = !0, Sdk.Mdq.ValueEnums.SecurityTypes.__flags = !0, Sdk.Mdq.ValueEnums.StringFormat.prototype = { Email: "Email", PhoneticGuide: "PhoneticGuide", Text: "Text", TextArea: "TextArea", TickerSymbol: "TickerSymbol", Url: "Url", VersionNumber: "VersionNumber" }, Sdk.Mdq.ValueEnums.StringFormat.Email = "Email", Sdk.Mdq.ValueEnums.StringFormat.PhoneticGuide = "PhoneticGuide", Sdk.Mdq.ValueEnums.StringFormat.Text = "Text", Sdk.Mdq.ValueEnums.StringFormat.TextArea = "TextArea", Sdk.Mdq.ValueEnums.StringFormat.TickerSymbol = "TickerSymbol", Sdk.Mdq.ValueEnums.StringFormat.Url = "Url", Sdk.Mdq.ValueEnums.StringFormat.VersionNumber = "VersionNumber", Sdk.Mdq.ValueEnums.StringFormat.__enum = !0, Sdk.Mdq.ValueEnums.StringFormat.__flags = !0;