//*******************************************************************************
//   Copyright 2012 Guy Barker
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//*******************************************************************************

// MailProcessor.cs : Performs all UI Automation operations in this sample app.

using System;
using interop.UIAutomationCore; // Generated by VS 2010 as the interop layer between the C# sample code and the unmanaged Windows 7 UIA API.

namespace Win7UIAClientManaged
{
    class MailProcessor
    {
        private IUIAutomation _automation; // Main UIA object required by any UIA client app.

        // Note that UIAutomationClient.UIA_PropertyIds and UIA_PatternIds could be supplied to calls to 
        // UIA in this file, but that would require building the sample using settings other than the VS 
        // defaults. So instead supply a value equal to UIAutomationClient.UIA_PropertyIds and UIA_PatternIds
        // as shown in UIAutomationClient.h.

        private int _propertyIdName = 30005; // UIA_NamePropertyId
        private int _propertyIdIsTextPatternAvailable = 30040; // UIA_IsTextPatternAvailablePropertyId
        private int _patternIdTextPattern = 10014; // UIA_TextPatternId

        public void Initialize()
        {
            // The first step in calling UIA is getting a CUIAutomation object.
            _automation = new CUIAutomation();
        }

        public void Uninitialize()
        {
            if (_automation != null)
            {
                _automation = null;
            }
        }

        public string GetMail()
        {
            string strMailContent = "";

        // Try to find a Windows Live Mail window for composing and reading e-mails.
        // Using the Spy tool, the class of the main window can be found. This test
        // app assumes there's only one Windows Live Mail window of interest.
        IntPtr hwnd = Win32.FindWindow("ATH_Note", null);
        if (hwnd != IntPtr.Zero)
        {
            // We found a window, so get the UIA element associated with the window.
            IUIAutomationElement elementMailAppWindow = _automation.ElementFromHandle(
                                                            hwnd);

            // Find an element somewhere beneath the main window element in the UIA 
            // tree which represents the main area where the e-mail content is shown. 
            // Using the Inspect SDK tool, we can see that the main e-mail content 
            // is contained within an element whose accessible name is "NoteWindow". 
            // So create a condition such that the FindFirst() call below will only 
            // return an element if its name is "NoteWindow".
            IUIAutomationCondition conditionNote = _automation.CreatePropertyCondition(
                                                        _propertyIdName, "NoteWindow");

            IUIAutomationElement elementNoteWindow = elementMailAppWindow.FindFirst(
                                                        TreeScope.TreeScope_Descendants, 
                                                        conditionNote);

            // As it happens, the actual element that supports the Text Pattern is 
            // somewhere beneath the "NoteWindow" element in the UIA tree. Using 
            // Inspect we can see that there is an element that supports the 
            // Text Pattern. Once we have that element, we can avoid a cross-process 
            // call to access the Text Pattern object by using cache request.
            IUIAutomationCacheRequest cacheRequest = _automation.CreateCacheRequest();
            cacheRequest.AddPattern(_patternIdTextPattern);

            // Now find the element that supports the Text Pattern. This test app assumes
            // there’s only one element that can be returned which supports the Text Pattern.
            bool fTextPatternSupported = true;
            IUIAutomationCondition conditionTextPattern = _automation.CreatePropertyCondition(
                                                            _propertyIdIsTextPatternAvailable, 
                                                            fTextPatternSupported);

            IUIAutomationElement elementMailContent = elementMailAppWindow.FindFirstBuildCache(
                                                            TreeScope.TreeScope_Descendants, 
                                                            conditionTextPattern, 
                                                            cacheRequest);

            // Because the Text Pattern object is cached, we don't have to make a cross-process 
            // call here to get object. Later calls which actually use methods and properties 
            // on the Text Pattern object will incur cross-proc calls.
            IUIAutomationTextPattern textPattern = (IUIAutomationTextPattern)
                                                        elementMailContent.GetCachedPattern(
                                                            _patternIdTextPattern);

            // This test app is only interested in getting all the e-mail text, so we get that through 
            // the DocumentRange property. A more fully featured app might be interested in getting a
            // collection of Text Ranges from the e-mail. Each range might relate to an individual
            // word or paragraph. Given that a provider which supports the Text Pattern allows a 
            // client to find the bounding rectangles of these ranges, the client could choose to use 
            // its own method of highlighting the text as the text is being spoken.
            IUIAutomationTextRange rangeDocument = textPattern.DocumentRange;

            // Pass -1 here because we're not interested in limiting the amount of text here.
            strMailContent = rangeDocument.GetText(-1); 
        }

            return strMailContent;
        }
    }
}
